{"version":3,"file":"vamtiger-generate-bundle-script.js","sources":["../source/vamtiger-generate-bundle-script.ts"],"sourcesContent":["import { resolve as resolvePath } from 'path';\nimport getFolderContent from 'vamtiger-get-directory-content';\nimport createFile from 'vamtiger-create-file';\nimport Args from 'vamtiger-argv/build/main';\nconst format = require('beautify');\n\ninterface IPackage {\n    name: string;\n    scripts: {\n        'bundle-source-main': string;\n        'bundle-source'?: string;\n    }\n}\n\nconst { stringify } = JSON;\nconst { cwd } = process;\nconst args = new Args();\nconst config = {\n    format: 'json'\n};\nconst packagePath = resolvePath(\n    cwd(),\n    'package'\n);\nconst packageJson = getPackageJson();\nconst sourceFolder = args.has('sourceFolder') && args.get('sourceFolder')\n    || args.has('s') && args.get('s')\n    || 'source';\nconst { name = '', scripts = {'bundle-source-main': ''} } = packageJson || {};\nconst { 'bundle-source-main': mainBundleScript } = scripts;\nconst fileName = new RegExp(name);\n\nif (!name) {\n    console.warn(`Failed to reference package name`);\n} else if (!scripts) {\n    console.warn(`Failed to reference package scripts`);\n} else if (!mainBundleScript) {\n    console.warn(`Failed to reference package.scripts['bundle-source-main']`);\n} else {\n    generateBundleScript();\n}\n\nfunction getPackageJson() {\n    try {\n        return require(packagePath) as IPackage;\n    } catch(error) {\n        console.warn(`Failed to load packge.json: ${packagePath}`);\n    }\n}\n\nasync function generateBundleScript() {\n    const folderContent = await getFolderContent(sourceFolder);\n    const scriptFiles = folderContent.filter(file => file.match(fileName));\n    const generatedBundleScript = scriptFiles\n        .map(fileName => `vamtiger-bundle-typescript --relativePath --entryFilePath source/${fileName} --bundleFilePath build/${fileName.split('.')[0]}.js --format iife --sourcemap true --copySourceMap --minify`)\n        .join(' && ');\n    const script = `${mainBundleScript} && ${generatedBundleScript}`;\n\n    if (packageJson && script) {\n        packageJson.scripts['bundle-source'] = script;\n\n        await createFile(`${packagePath}.json`, format(stringify(packageJson), config));\n    }\n}\n"],"names":["format","require","stringify","JSON","cwd","process","args","Args","config","packagePath","resolvePath","packageJson","getPackageJson","sourceFolder","has","get","name","scripts","bundle-source-main","mainBundleScript","fileName","RegExp","error","console","warn","async","generateBundleScript","generatedBundleScript","getFolderContent","filter","file","match","map","split","join","script","createFile"],"mappings":"4TAIA,MAAMA,OAASC,QAAQ,aAUjBC,UAAEA,WAAcC,MAChBC,IAAEA,KAAQC,QACVC,KAAO,IAAIC,KACXC,QACFR,OAAQ,QAENS,YAAcC,aAChBN,MACA,WAEEO,YAAcC,iBACdC,aAAeP,KAAKQ,IAAI,iBAAmBR,KAAKS,IAAI,iBACnDT,KAAKQ,IAAI,MAAQR,KAAKS,IAAI,MAC1B,UACDC,KAAEA,KAAO,GAAEC,QAAEA,SAAWC,qBAAsB,KAAQP,iBACpDO,qBAAsBC,kBAAqBF,QAC7CG,SAAW,IAAIC,OAAOL,MAY5B,SAASJ,iBACL,IACI,OAAOX,QAAQQ,aACjB,MAAMa,GACJC,QAAQC,oCAAoCf,gBAIpDgB,eAAeC,uBACX,MAEMC,SAFsBC,iBAAiBf,eACXgB,OAAOC,GAAQA,EAAKC,MAAMX,WAEvDY,IAAIZ,uEAAgFA,4BAAmCA,EAASa,MAAM,KAAK,iEAC3IC,KAAK,QACJC,KAAYhB,uBAAuBQ,IAErChB,aAAewB,IACfxB,YAAYM,QAAQ,iBAAmBkB,QAEjCC,cAAc3B,mBAAoBT,OAAOE,UAAUS,aAAcH,UA7B1EQ,KAEOC,QAEAE,iBAGRO,uBAFAH,QAAQC,KAAK,6DAFbD,QAAQC,KAAK,uCAFbD,QAAQC,KAAK"}