{"version":3,"file":"vamtiger-generate-bundle-script.js","sources":["../source/vamtiger-generate-bundle-script.ts"],"sourcesContent":["import { resolve as resolvePath } from 'path';\nimport getFolderContent from 'vamtiger-get-directory-content';\nimport createFile from 'vamtiger-create-file';\n\ninterface IPackage {\n    name: string;\n    scripts: {\n        'bundle-source-main': string;\n        'bundle-source'?: string;\n    }\n}\n\nconst { stringify } = JSON;\nconst { cwd } = process;\nconst format = require('beautify');\nconst config = {\n    format: 'json'\n};\nconst packagePath = resolvePath(cwd(), 'package');\nconst packageJson = getPackageJson();\nconst { name = '', scripts = {'bundle-source-main': ''} } = packageJson || {};\nconst { 'bundle-source-main': mainBundleScript } = scripts;\nconst fileName = new RegExp(name);\n\nif (!name) {\n    console.warn(`Failed to reference package name`);\n} else if (!scripts) {\n    console.warn(`Failed to reference package scripts`);\n} else if (!mainBundleScript) {\n    console.warn(`Failed to reference package.scripts['bundle-source-main']`);\n} else {\n    generateBundleScript();\n}\n\nfunction getPackageJson() {\n    try {\n        return require(packagePath) as IPackage;\n    } catch(error) {\n        console.warn(`Failed to load packge.json: ${packagePath}`);\n    }\n}\n\nasync function generateBundleScript() {\n    const folderContent = await getFolderContent(cwd());\n    const scriptFiles = folderContent.filter(file => file.match(fileName));\n    const generatedBundleScript = scriptFiles\n        .map(fileName => `vamtiger-bundle-typescript --relativePath --entryFilePath source/${fileName} --bundleFilePath build/${fileName}.js --format iife --sourcemap true --copySourceMap --minify`)\n        .join(' && ');\n    const script = `${mainBundleScript} && ${generatedBundleScript}`;\n\n    if (packageJson && script) {\n        packageJson.scripts['bundle-source'] = script;\n\n        await createFile(`${packagePath}.json`, format(stringify(packageJson), config));\n    }\n}"],"names":["stringify","cwd","format","require","config","packagePath","resolvePath","packageJson","getPackageJson","_a","_b","name","_c","scripts","mainBundleScript","fileName","RegExp","error","console","warn","generateBundleScript","getFolderContent","folderContent","scriptFiles","filter","file","match","generatedBundleScript","map","join","script","createFile"],"mappings":"0gBAYQ,IAAAA,yBACAC,gBACFC,OAASC,QAAQ,YACjBC,QACFF,OAAQ,QAENG,YAAcC,aAAYL,MAAO,WACjCM,YAAcC,iBACdC,mBAAEC,WAAAC,uBAAWC,cAAAC,iDACXC,+CACFC,SAAW,IAAIC,OAAOL,MAY5B,SAASH,iBACL,IACI,OAAOL,QAAQE,aACjB,MAAMY,GACJC,QAAQC,KAAK,+BAA+Bd,cAIpD,SAAee,6IACW,SAAMC,iBAAiBpB,sBAAvCqB,EAAgBb,SAChBc,EAAcD,EAAcE,OAAO,SAAAC,GAAQ,OAAAA,EAAKC,MAAMX,YACtDY,EAAwBJ,EACzBK,IAAI,SAAAb,GAAY,MAAA,oEAAoEA,6BAAmCA,kEACvHc,KAAK,QACJC,EAAYhB,wBAAuBa,EAErCpB,aAAeuB,GACfvB,YAAYM,QAAQ,iBAAmBiB,KAEjCC,WAAc1B,oBAAoBH,OAAOF,UAAUO,aAAcH,wBAAvEK,yCA7BHE,KAEOE,QAEAC,iBAGRM,uBAFAF,QAAQC,KAAK,6DAFbD,QAAQC,KAAK,uCAFbD,QAAQC,KAAK"}