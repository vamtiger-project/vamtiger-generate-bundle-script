#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var path=require("path"),getFolderContent=_interopDefault(require("vamtiger-get-directory-content")),createFile=_interopDefault(require("vamtiger-create-file")),Args=_interopDefault(require("vamtiger-argv/build/main"));const format=require("beautify"),{stringify:stringify}=JSON,{cwd:cwd}=process,args=new Args,config={format:"json"},packagePath=path.resolve(cwd(),"package"),packageJson=getPackageJson(),sourceFolder=args.has("sourceFolder")&&args.get("sourceFolder")||args.has("s")&&args.get("s")||"source",{name:name="",scripts:scripts={"bundle-source-main":""}}=packageJson||{},{"bundle-source-main":mainBundleScript}=scripts,fileName=new RegExp(name);function getPackageJson(){try{return require(packagePath)}catch(e){console.warn(`Failed to load packge.json: ${packagePath}`)}}async function generateBundleScript(){const e=(await getFolderContent(sourceFolder)).filter(e=>e.match(fileName)).map(e=>`vamtiger-bundle-typescript --relativePath --entryFilePath source/${e} --bundleFilePath build/${e.split(".")[0]}.js --format iife --sourcemap true --copySourceMap --minify`).join(" && "),a=`${mainBundleScript} && ${e}`,r={};let t;packageJson&&a&&(packageJson.scripts["bundle-source"]=a,(t=Object.keys(packageJson.scripts).sort()).forEach(e=>{packageJson.scripts[e]&&(r[e]=packageJson.scripts[e])}),packageJson.scripts=r,await createFile(`${packagePath}.json`,format(stringify(packageJson),config)))}name?scripts?mainBundleScript?generateBundleScript():console.warn("Failed to reference package.scripts['bundle-source-main']"):console.warn("Failed to reference package scripts"):console.warn("Failed to reference package name");
//# sourceMappingURL=vamtiger-generate-bundle-script.js.map
